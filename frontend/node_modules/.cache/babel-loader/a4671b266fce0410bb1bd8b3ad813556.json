{"ast":null,"code":"import _slicedToArray from \"/Users/noamrubin/Documents/web-projects/alteos/tech-challenge/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/noamrubin/Documents/web-projects/alteos/tech-challenge/client/src/components/Search.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Employee from \"../components/Employee\";\nimport \"./Search.css\";\n\nconst Search = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchInput = _useState2[0],\n        setSearchInput = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        matchList = _useState4[0],\n        setMatchList = _useState4[1];\n\n  const employees = props.data;\n  useEffect(() => {\n    console.log(\"didmounT\");\n  }, []);\n\n  const handleChange = event => {\n    // change state of search input based on input searchbar\n    setSearchInput(event.target.value);\n    console.log(\"search term:\", searchInput);\n  };\n  /* match between employees properties and searchterm is being checked each time searchterm changes */\n\n\n  useEffect(() => {\n    console.log(\"didmount searchinput\");\n    let match = []; // iterate over employees\n\n    employees.forEach(employee => {\n      // if properties include searchinput\n      if (employee.name.toLowerCase().includes(searchInput.toLowerCase()) || employee.age.toString().includes(searchInput) || employee.gender.includes(searchInput) && employee.gender.indexOf(searchInput) === 0 || employee.eyeColor.includes(searchInput.toLowerCase()) || employee.company.toLowerCase().includes(searchInput.toLowerCase()) || employee.email.includes(searchInput.toLowerCase()) || employee.phone.replace(/[+()-\\s]/g, \"\").includes(searchInput.replace(/[+()-\\s]/g, \"\")) || employee.address.replace(/\\s/g, \"\").includes(searchInput.replace(/\\s/g, \"\"))) {\n        // update the state\n        match.push(employee);\n        setMatchList(match);\n      } // otherwise update the state without them\n\n\n      setMatchList(match);\n    });\n  }, [searchInput]);\n  useEffect(() => {}, [employees, matchList]);\n  return React.createElement(\"div\", {\n    className: \"search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"input-searchbar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Search: \"), React.createElement(\"input\", {\n    className: \"input-field\",\n    type: \"text\",\n    name: \"search\",\n    value: searchInput,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(Employee, {\n    data: matchList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/noamrubin/Documents/web-projects/alteos/tech-challenge/client/src/components/Search.js"],"names":["React","useState","useEffect","Employee","Search","props","searchInput","setSearchInput","matchList","setMatchList","employees","data","console","log","handleChange","event","target","value","match","forEach","employee","name","toLowerCase","includes","age","toString","gender","indexOf","eyeColor","company","email","phone","replace","address","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Employee from \"../components/Employee\";\nimport \"./Search.css\";\n\nconst Search = props => {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [matchList, setMatchList] = useState([]);\n  const employees = props.data;\n\n  useEffect(() => {\n    console.log(\"didmounT\");\n  }, []);\n\n  const handleChange = event => {\n    // change state of search input based on input searchbar\n    setSearchInput(event.target.value);\n    console.log(\"search term:\", searchInput);\n  };\n\n  /* match between employees properties and searchterm is being checked each time searchterm changes */\n  useEffect(() => {\n    console.log(\"didmount searchinput\");\n    let match = [];\n    // iterate over employees\n    employees.forEach(employee => {\n      // if properties include searchinput\n      if (\n        employee.name.toLowerCase().includes(searchInput.toLowerCase()) ||\n        employee.age.toString().includes(searchInput) ||\n        (employee.gender.includes(searchInput) &&\n          employee.gender.indexOf(searchInput) === 0) ||\n        employee.eyeColor.includes(searchInput.toLowerCase()) ||\n        employee.company.toLowerCase().includes(searchInput.toLowerCase()) ||\n        employee.email.includes(searchInput.toLowerCase()) ||\n        employee.phone\n          .replace(/[+()-\\s]/g, \"\")\n          .includes(searchInput.replace(/[+()-\\s]/g, \"\")) ||\n        employee.address\n          .replace(/\\s/g, \"\")\n          .includes(searchInput.replace(/\\s/g, \"\"))\n      ) {\n        // update the state\n        match.push(employee);\n        setMatchList(match);\n      }\n      // otherwise update the state without them\n      setMatchList(match);\n    });\n  }, [searchInput]);\n\n  useEffect(() => {}, [employees, matchList]);\n\n  return (\n    <div className=\"search\">\n      <form className=\"input-searchbar\">\n        <label htmlFor=\"search\">Search: </label>\n        <input\n          className=\"input-field\"\n          type=\"text\"\n          name=\"search\"\n          value={searchInput}\n          onChange={handleChange}\n        />\n      </form>\n      <Employee data={matchList} />\n    </div>\n  );\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}